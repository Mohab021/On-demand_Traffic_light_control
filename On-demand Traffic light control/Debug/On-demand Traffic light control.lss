
On-demand Traffic light control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000528  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000059c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  0000059c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012bb  00000000  00000000  00000748  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000959  00000000  00000000  00001a03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c28  00000000  00000000  0000235c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  00002f84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000061c  00000000  00000000  00003198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ad  00000000  00000000  000037b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004161  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 f5 01 	call	0x3ea	; 0x3ea <main>
  74:	0c 94 92 02 	jmp	0x524	; 0x524 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_start>:
	/*  Step4: Start with Normal mode */
	/*  Step5: Still in Normal mode through while loop, from Green to Blink Yellow to Red to Blink Yellow again to Green and etc.. */
	/*  Step6: When button is pressed, INT0 will change mode to Pedestrian mode */
	/*  Step7: Start execution of Pedestrian mode through while loop according to the last state from Normal mode and go on until back to Normal mode again */
	
	BUTTON_interrupt(D, 2); //Step1
  7c:	62 e0       	ldi	r22, 0x02	; 2
  7e:	80 e3       	ldi	r24, 0x30	; 48
  80:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <BUTTON_interrupt>
	LED_init(A, Green); //Step2
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	89 e3       	ldi	r24, 0x39	; 57
  88:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LED_init>
	LED_init(A, Yellow);
  8c:	61 e0       	ldi	r22, 0x01	; 1
  8e:	89 e3       	ldi	r24, 0x39	; 57
  90:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LED_init>
	LED_init(A, Red);
  94:	62 e0       	ldi	r22, 0x02	; 2
  96:	89 e3       	ldi	r24, 0x39	; 57
  98:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LED_init>
	LED_init(B, Green); //Step3
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	86 e3       	ldi	r24, 0x36	; 54
  a0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LED_init>
	LED_init(B, Yellow);
  a4:	61 e0       	ldi	r22, 0x01	; 1
  a6:	86 e3       	ldi	r24, 0x36	; 54
  a8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LED_init>
	LED_init(B, Red);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	86 e3       	ldi	r24, 0x36	; 54
  b0:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LED_init>
		
	Current_Mode = Normal; //Step4
  b4:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		
	while (1)
	{
		//Normal Mode
		if(Current_Mode == Normal){ //Step5
  b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  bc:	81 11       	cpse	r24, r1
  be:	07 c0       	rjmp	.+14     	; 0xce <APP_start+0x52>
			LED_on_time(A, Green, 5);
  c0:	45 e0       	ldi	r20, 0x05	; 5
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	89 e3       	ldi	r24, 0x39	; 57
  c6:	0e 94 33 01 	call	0x266	; 0x266 <LED_on_time>
			Car_State = Green;
  ca:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Car_State>
		}
		if(Current_Mode == Normal){
  ce:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  d2:	81 11       	cpse	r24, r1
  d4:	08 c0       	rjmp	.+16     	; 0xe6 <APP_start+0x6a>
			LED_blink_time(A, Yellow, 5);
  d6:	45 e0       	ldi	r20, 0x05	; 5
  d8:	61 e0       	ldi	r22, 0x01	; 1
  da:	89 e3       	ldi	r24, 0x39	; 57
  dc:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_blink_time>
			Car_State = Yellow;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Car_State>
		}
		if(Current_Mode == Normal){
  e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ea:	81 11       	cpse	r24, r1
  ec:	08 c0       	rjmp	.+16     	; 0xfe <APP_start+0x82>
			LED_on_time(A, Red, 5);
  ee:	45 e0       	ldi	r20, 0x05	; 5
  f0:	62 e0       	ldi	r22, 0x02	; 2
  f2:	89 e3       	ldi	r24, 0x39	; 57
  f4:	0e 94 33 01 	call	0x266	; 0x266 <LED_on_time>
			Car_State = Red;
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Car_State>
		}
		if(Current_Mode == Normal){
  fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 102:	81 11       	cpse	r24, r1
 104:	08 c0       	rjmp	.+16     	; 0x116 <APP_start+0x9a>
			LED_blink_time(A, Yellow, 5);
 106:	45 e0       	ldi	r20, 0x05	; 5
 108:	61 e0       	ldi	r22, 0x01	; 1
 10a:	89 e3       	ldi	r24, 0x39	; 57
 10c:	0e 94 66 01 	call	0x2cc	; 0x2cc <LED_blink_time>
			Car_State = Yellow;
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Car_State>
		}
			
			
		//Pedestrian Mode
		if(Current_Mode == Pedestrian){ //Step7
 116:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	69 f6       	brne	.-102    	; 0xb8 <APP_start+0x3c>
			if(Car_State == Green){
 11e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Car_State>
 122:	81 11       	cpse	r24, r1
 124:	07 c0       	rjmp	.+14     	; 0x134 <APP_start+0xb8>
				LED_on(B, Red);
 126:	62 e0       	ldi	r22, 0x02	; 2
 128:	86 e3       	ldi	r24, 0x36	; 54
 12a:	0e 94 0d 01 	call	0x21a	; 0x21a <LED_on>
				Car_State = Yellow; //Go to next case
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Car_State>
			}
			if(Car_State == Yellow){
 134:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Car_State>
 138:	81 30       	cpi	r24, 0x01	; 1
 13a:	71 f4       	brne	.+28     	; 0x158 <APP_start+0xdc>
				LED_on(B, Red);
 13c:	62 e0       	ldi	r22, 0x02	; 2
 13e:	86 e3       	ldi	r24, 0x36	; 54
 140:	0e 94 0d 01 	call	0x21a	; 0x21a <LED_on>
				LED_double_blink_time(A, 1, B, 1, 5);
 144:	05 e0       	ldi	r16, 0x05	; 5
 146:	21 e0       	ldi	r18, 0x01	; 1
 148:	46 e3       	ldi	r20, 0x36	; 54
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	89 e3       	ldi	r24, 0x39	; 57
 14e:	0e 94 9d 01 	call	0x33a	; 0x33a <LED_double_blink_time>
				Car_State = Red; //Go to next case
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <Car_State>
			}
			if(Car_State == Red){
 158:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Car_State>
 15c:	82 30       	cpi	r24, 0x02	; 2
 15e:	31 f5       	brne	.+76     	; 0x1ac <APP_start+0x130>
				LED_off(B, Red);
 160:	62 e0       	ldi	r22, 0x02	; 2
 162:	86 e3       	ldi	r24, 0x36	; 54
 164:	0e 94 20 01 	call	0x240	; 0x240 <LED_off>
				LED_on(A, Red);
 168:	62 e0       	ldi	r22, 0x02	; 2
 16a:	89 e3       	ldi	r24, 0x39	; 57
 16c:	0e 94 0d 01 	call	0x21a	; 0x21a <LED_on>
				LED_on_time(B, Green, 5);
 170:	45 e0       	ldi	r20, 0x05	; 5
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	86 e3       	ldi	r24, 0x36	; 54
 176:	0e 94 33 01 	call	0x266	; 0x266 <LED_on_time>
				LED_on(B, Green);
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	86 e3       	ldi	r24, 0x36	; 54
 17e:	0e 94 0d 01 	call	0x21a	; 0x21a <LED_on>
				LED_off(A, Red);
 182:	62 e0       	ldi	r22, 0x02	; 2
 184:	89 e3       	ldi	r24, 0x39	; 57
 186:	0e 94 20 01 	call	0x240	; 0x240 <LED_off>
				LED_double_blink_time(A, Yellow, B, Yellow, 5);
 18a:	05 e0       	ldi	r16, 0x05	; 5
 18c:	21 e0       	ldi	r18, 0x01	; 1
 18e:	46 e3       	ldi	r20, 0x36	; 54
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	89 e3       	ldi	r24, 0x39	; 57
 194:	0e 94 9d 01 	call	0x33a	; 0x33a <LED_double_blink_time>
				LED_off(B, Green);
 198:	60 e0       	ldi	r22, 0x00	; 0
 19a:	86 e3       	ldi	r24, 0x36	; 54
 19c:	0e 94 20 01 	call	0x240	; 0x240 <LED_off>
				LED_on(B, Red);
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	86 e3       	ldi	r24, 0x36	; 54
 1a4:	0e 94 0d 01 	call	0x21a	; 0x21a <LED_on>
				Car_State = Green; //Back to Normal Mode
 1a8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <Car_State>
			}
			Current_Mode = Normal; //Change to Normal Mode
 1ac:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 1b0:	83 cf       	rjmp	.-250    	; 0xb8 <APP_start+0x3c>

000001b2 <__vector_1>:
	}
}

//Interrupt Service Routine for Interrupt 0 - INT0
ISR(INT0_vect) //Trigger when sensing rising edge on INT0
{
 1b2:	1f 92       	push	r1
 1b4:	0f 92       	push	r0
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	0f 92       	push	r0
 1ba:	11 24       	eor	r1, r1
 1bc:	8f 93       	push	r24
	//Change to Pedestrian Mode
	Current_Mode = Pedestrian; //Step6
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c4:	8f 91       	pop	r24
 1c6:	0f 90       	pop	r0
 1c8:	0f be       	out	0x3f, r0	; 63
 1ca:	0f 90       	pop	r0
 1cc:	1f 90       	pop	r1
 1ce:	18 95       	reti

000001d0 <BUTTON_interrupt>:
	DIO_read(Port, Pin, Value);
	return Button_OK;
}

errorState_Button BUTTON_interrupt(uint8t Port, uint8t Pin){
	if( !(Port == A || Port == B || Port == C || Port == D) ){
 1d0:	89 33       	cpi	r24, 0x39	; 57
 1d2:	31 f0       	breq	.+12     	; 0x1e0 <BUTTON_interrupt+0x10>
 1d4:	86 33       	cpi	r24, 0x36	; 54
 1d6:	21 f0       	breq	.+8      	; 0x1e0 <BUTTON_interrupt+0x10>
 1d8:	83 33       	cpi	r24, 0x33	; 51
 1da:	11 f0       	breq	.+4      	; 0x1e0 <BUTTON_interrupt+0x10>
 1dc:	80 33       	cpi	r24, 0x30	; 48
 1de:	31 f4       	brne	.+12     	; 0x1ec <BUTTON_interrupt+0x1c>
		return Button_Wrong_Port;
	}
	if( !(Pin>=0 && Pin<8) ){
 1e0:	68 30       	cpi	r22, 0x08	; 8
 1e2:	30 f4       	brcc	.+12     	; 0x1f0 <BUTTON_interrupt+0x20>
		return Button_Wrong_Pin;
	}
	
	Interrupt_init();
 1e4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <Interrupt_init>
	return Button_OK;
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	08 95       	ret
	return Button_OK;
}

errorState_Button BUTTON_interrupt(uint8t Port, uint8t Pin){
	if( !(Port == A || Port == B || Port == C || Port == D) ){
		return Button_Wrong_Port;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	08 95       	ret
	}
	if( !(Pin>=0 && Pin<8) ){
		return Button_Wrong_Pin;
 1f0:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	Interrupt_init();
	return Button_OK;
 1f2:	08 95       	ret

000001f4 <LED_init>:
		return LED_Wrong_Pin;
	}
	
	DIO_toggle(Port, Pin);
	return LED_OK;
}
 1f4:	89 33       	cpi	r24, 0x39	; 57
 1f6:	31 f0       	breq	.+12     	; 0x204 <LED_init+0x10>
 1f8:	86 33       	cpi	r24, 0x36	; 54
 1fa:	21 f0       	breq	.+8      	; 0x204 <LED_init+0x10>
 1fc:	83 33       	cpi	r24, 0x33	; 51
 1fe:	11 f0       	breq	.+4      	; 0x204 <LED_init+0x10>
 200:	80 33       	cpi	r24, 0x30	; 48
 202:	39 f4       	brne	.+14     	; 0x212 <LED_init+0x1e>
 204:	68 30       	cpi	r22, 0x08	; 8
 206:	38 f4       	brcc	.+14     	; 0x216 <LED_init+0x22>
 208:	4f ef       	ldi	r20, 0xFF	; 255
 20a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <DIO_init>
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	08 95       	ret
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	08 95       	ret
 216:	82 e0       	ldi	r24, 0x02	; 2
 218:	08 95       	ret

0000021a <LED_on>:
 21a:	89 33       	cpi	r24, 0x39	; 57
 21c:	31 f0       	breq	.+12     	; 0x22a <LED_on+0x10>
 21e:	86 33       	cpi	r24, 0x36	; 54
 220:	21 f0       	breq	.+8      	; 0x22a <LED_on+0x10>
 222:	83 33       	cpi	r24, 0x33	; 51
 224:	11 f0       	breq	.+4      	; 0x22a <LED_on+0x10>
 226:	80 33       	cpi	r24, 0x30	; 48
 228:	39 f4       	brne	.+14     	; 0x238 <LED_on+0x1e>
 22a:	68 30       	cpi	r22, 0x08	; 8
 22c:	38 f4       	brcc	.+14     	; 0x23c <LED_on+0x22>
 22e:	41 e0       	ldi	r20, 0x01	; 1
 230:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_write>
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	08 95       	ret
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	08 95       	ret
 23c:	82 e0       	ldi	r24, 0x02	; 2
 23e:	08 95       	ret

00000240 <LED_off>:
 240:	89 33       	cpi	r24, 0x39	; 57
 242:	31 f0       	breq	.+12     	; 0x250 <LED_off+0x10>
 244:	86 33       	cpi	r24, 0x36	; 54
 246:	21 f0       	breq	.+8      	; 0x250 <LED_off+0x10>
 248:	83 33       	cpi	r24, 0x33	; 51
 24a:	11 f0       	breq	.+4      	; 0x250 <LED_off+0x10>
 24c:	80 33       	cpi	r24, 0x30	; 48
 24e:	39 f4       	brne	.+14     	; 0x25e <LED_off+0x1e>
 250:	68 30       	cpi	r22, 0x08	; 8
 252:	38 f4       	brcc	.+14     	; 0x262 <LED_off+0x22>
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_write>
 25a:	80 e0       	ldi	r24, 0x00	; 0
 25c:	08 95       	ret
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	08 95       	ret
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	08 95       	ret

00000266 <LED_on_time>:

errorState_LED LED_on_time(uint8t Port, uint8t Pin, uint8t Value){
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
	if( !(Port == A || Port == B || Port == C || Port == D) ){
 26e:	89 33       	cpi	r24, 0x39	; 57
 270:	31 f0       	breq	.+12     	; 0x27e <LED_on_time+0x18>
 272:	86 33       	cpi	r24, 0x36	; 54
 274:	21 f0       	breq	.+8      	; 0x27e <LED_on_time+0x18>
 276:	83 33       	cpi	r24, 0x33	; 51
 278:	11 f0       	breq	.+4      	; 0x27e <LED_on_time+0x18>
 27a:	80 33       	cpi	r24, 0x30	; 48
 27c:	f9 f4       	brne	.+62     	; 0x2bc <LED_on_time+0x56>
		return LED_Wrong_Port;
	}
	if( !(Pin>=0 && Pin<8) ){
 27e:	68 30       	cpi	r22, 0x08	; 8
 280:	f8 f4       	brcc	.+62     	; 0x2c0 <LED_on_time+0x5a>
 282:	14 2f       	mov	r17, r20
 284:	06 2f       	mov	r16, r22
 286:	d8 2f       	mov	r29, r24
	
	/* Step1: Turn On LED */
	/* Step2: Still High for Number of seconds */
	/* Step1: Turn Off LED */
	
	DIO_write(Port, Pin, high); //Step1
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_write>
	for(char i=0 ; i<Value*4 ; i++){
 28e:	c0 e0       	ldi	r28, 0x00	; 0
 290:	03 c0       	rjmp	.+6      	; 0x298 <LED_on_time+0x32>
		_delay_250m(); //Step2
 292:	0e 94 83 02 	call	0x506	; 0x506 <_delay_250m>
	/* Step1: Turn On LED */
	/* Step2: Still High for Number of seconds */
	/* Step1: Turn Off LED */
	
	DIO_write(Port, Pin, high); //Step1
	for(char i=0 ; i<Value*4 ; i++){
 296:	cf 5f       	subi	r28, 0xFF	; 255
 298:	ec 2f       	mov	r30, r28
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	21 2f       	mov	r18, r17
 29e:	30 e0       	ldi	r19, 0x00	; 0
 2a0:	22 0f       	add	r18, r18
 2a2:	33 1f       	adc	r19, r19
 2a4:	22 0f       	add	r18, r18
 2a6:	33 1f       	adc	r19, r19
 2a8:	e2 17       	cp	r30, r18
 2aa:	f3 07       	cpc	r31, r19
 2ac:	94 f3       	brlt	.-28     	; 0x292 <LED_on_time+0x2c>
		_delay_250m(); //Step2
	}
	DIO_write(Port, Pin, low); //Step3
 2ae:	40 e0       	ldi	r20, 0x00	; 0
 2b0:	60 2f       	mov	r22, r16
 2b2:	8d 2f       	mov	r24, r29
 2b4:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_write>
	return LED_OK;
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	03 c0       	rjmp	.+6      	; 0x2c2 <LED_on_time+0x5c>
	return LED_OK;
}

errorState_LED LED_on_time(uint8t Port, uint8t Pin, uint8t Value){
	if( !(Port == A || Port == B || Port == C || Port == D) ){
		return LED_Wrong_Port;
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	01 c0       	rjmp	.+2      	; 0x2c2 <LED_on_time+0x5c>
	}
	if( !(Pin>=0 && Pin<8) ){
		return LED_Wrong_Pin;
 2c0:	82 e0       	ldi	r24, 0x02	; 2
	for(char i=0 ; i<Value*4 ; i++){
		_delay_250m(); //Step2
	}
	DIO_write(Port, Pin, low); //Step3
	return LED_OK;
}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	08 95       	ret

000002cc <LED_blink_time>:

errorState_LED LED_blink_time(uint8t Port, uint8t Pin, uint8t Value){
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
	if( !(Port == A || Port == B || Port == C || Port == D) ){
 2d4:	89 33       	cpi	r24, 0x39	; 57
 2d6:	31 f0       	breq	.+12     	; 0x2e4 <LED_blink_time+0x18>
 2d8:	86 33       	cpi	r24, 0x36	; 54
 2da:	21 f0       	breq	.+8      	; 0x2e4 <LED_blink_time+0x18>
 2dc:	83 33       	cpi	r24, 0x33	; 51
 2de:	11 f0       	breq	.+4      	; 0x2e4 <LED_blink_time+0x18>
 2e0:	80 33       	cpi	r24, 0x30	; 48
 2e2:	19 f5       	brne	.+70     	; 0x32a <LED_blink_time+0x5e>
		return LED_Wrong_Port;
	}
	if( !(Pin>=0 && Pin<8) ){
 2e4:	68 30       	cpi	r22, 0x08	; 8
 2e6:	18 f5       	brcc	.+70     	; 0x32e <LED_blink_time+0x62>
 2e8:	04 2f       	mov	r16, r20
 2ea:	16 2f       	mov	r17, r22
 2ec:	c8 2f       	mov	r28, r24
	
	/* Step1: Turn On LED */
	/* Step2: Blinking for Number of seconds */
	/* Step1: Turn Off LED */
	
	DIO_write(Port, Pin, high); //Step1
 2ee:	41 e0       	ldi	r20, 0x01	; 1
 2f0:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_write>
	for(char i=0 ; i<Value*4 ; i++){
 2f4:	d0 e0       	ldi	r29, 0x00	; 0
 2f6:	07 c0       	rjmp	.+14     	; 0x306 <LED_blink_time+0x3a>
		DIO_toggle(Port, Pin); //Step2
 2f8:	61 2f       	mov	r22, r17
 2fa:	8c 2f       	mov	r24, r28
 2fc:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_toggle>
		_delay_250m();
 300:	0e 94 83 02 	call	0x506	; 0x506 <_delay_250m>
	/* Step1: Turn On LED */
	/* Step2: Blinking for Number of seconds */
	/* Step1: Turn Off LED */
	
	DIO_write(Port, Pin, high); //Step1
	for(char i=0 ; i<Value*4 ; i++){
 304:	df 5f       	subi	r29, 0xFF	; 255
 306:	ed 2f       	mov	r30, r29
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	20 2f       	mov	r18, r16
 30c:	30 e0       	ldi	r19, 0x00	; 0
 30e:	22 0f       	add	r18, r18
 310:	33 1f       	adc	r19, r19
 312:	22 0f       	add	r18, r18
 314:	33 1f       	adc	r19, r19
 316:	e2 17       	cp	r30, r18
 318:	f3 07       	cpc	r31, r19
 31a:	74 f3       	brlt	.-36     	; 0x2f8 <LED_blink_time+0x2c>
		DIO_toggle(Port, Pin); //Step2
		_delay_250m();
	}
	DIO_write(Port, Pin, low); //Step3
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	61 2f       	mov	r22, r17
 320:	8c 2f       	mov	r24, r28
 322:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_write>
	return LED_OK;
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	03 c0       	rjmp	.+6      	; 0x330 <LED_blink_time+0x64>
	return LED_OK;
}

errorState_LED LED_blink_time(uint8t Port, uint8t Pin, uint8t Value){
	if( !(Port == A || Port == B || Port == C || Port == D) ){
		return LED_Wrong_Port;
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	01 c0       	rjmp	.+2      	; 0x330 <LED_blink_time+0x64>
	}
	if( !(Pin>=0 && Pin<8) ){
		return LED_Wrong_Pin;
 32e:	82 e0       	ldi	r24, 0x02	; 2
		DIO_toggle(Port, Pin); //Step2
		_delay_250m();
	}
	DIO_write(Port, Pin, low); //Step3
	return LED_OK;
}
 330:	df 91       	pop	r29
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
 336:	0f 91       	pop	r16
 338:	08 95       	ret

0000033a <LED_double_blink_time>:

errorState_LED LED_double_blink_time(uint8t Port1, uint8t Pin1, uint8t Port2, uint8t Pin2, uint8t Value){
 33a:	ef 92       	push	r14
 33c:	ff 92       	push	r15
 33e:	0f 93       	push	r16
 340:	1f 93       	push	r17
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
	if( !(Port1 == A || Port1 == B || Port1 == C || Port1 == D) ){
 346:	89 33       	cpi	r24, 0x39	; 57
 348:	31 f0       	breq	.+12     	; 0x356 <LED_double_blink_time+0x1c>
 34a:	86 33       	cpi	r24, 0x36	; 54
 34c:	21 f0       	breq	.+8      	; 0x356 <LED_double_blink_time+0x1c>
 34e:	83 33       	cpi	r24, 0x33	; 51
 350:	11 f0       	breq	.+4      	; 0x356 <LED_double_blink_time+0x1c>
 352:	80 33       	cpi	r24, 0x30	; 48
 354:	e1 f5       	brne	.+120    	; 0x3ce <LED_double_blink_time+0x94>
		return LED_Wrong_Port;
	}
	if( !(Pin1>=0 && Pin1<8) ){
 356:	68 30       	cpi	r22, 0x08	; 8
 358:	e0 f5       	brcc	.+120    	; 0x3d2 <LED_double_blink_time+0x98>
		return LED_Wrong_Pin;
	}
	if( !(Port2 == A || Port2 == B || Port2 == C || Port2 == D) ){
 35a:	49 33       	cpi	r20, 0x39	; 57
 35c:	31 f0       	breq	.+12     	; 0x36a <LED_double_blink_time+0x30>
 35e:	46 33       	cpi	r20, 0x36	; 54
 360:	21 f0       	breq	.+8      	; 0x36a <LED_double_blink_time+0x30>
 362:	43 33       	cpi	r20, 0x33	; 51
 364:	11 f0       	breq	.+4      	; 0x36a <LED_double_blink_time+0x30>
 366:	40 33       	cpi	r20, 0x30	; 48
 368:	b1 f5       	brne	.+108    	; 0x3d6 <LED_double_blink_time+0x9c>
		return LED_Wrong_Port;
	}
	if( !(Pin2>=0 && Pin2<8) ){
 36a:	28 30       	cpi	r18, 0x08	; 8
 36c:	b0 f5       	brcc	.+108    	; 0x3da <LED_double_blink_time+0xa0>
 36e:	f2 2e       	mov	r15, r18
 370:	14 2f       	mov	r17, r20
 372:	d6 2f       	mov	r29, r22
 374:	c8 2f       	mov	r28, r24

	/* Step1: Turn On LED1 and LED2 */
	/* Step2: Blinking for Number of seconds */
	/* Step1: Turn Off LED1 and LED2 */
	
	DIO_write(Port1, Pin1, high); //Step1
 376:	41 e0       	ldi	r20, 0x01	; 1
 378:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_write>
	DIO_write(Port2, Pin2, high);
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	6f 2d       	mov	r22, r15
 380:	81 2f       	mov	r24, r17
 382:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_write>
	for(char i=0 ; i<Value*4 ; i++){
 386:	e1 2c       	mov	r14, r1
 388:	0b c0       	rjmp	.+22     	; 0x3a0 <LED_double_blink_time+0x66>
		DIO_toggle(Port1, Pin1); //Step2
 38a:	6d 2f       	mov	r22, r29
 38c:	8c 2f       	mov	r24, r28
 38e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_toggle>
		DIO_toggle(Port2, Pin2);
 392:	6f 2d       	mov	r22, r15
 394:	81 2f       	mov	r24, r17
 396:	0e 94 5e 02 	call	0x4bc	; 0x4bc <DIO_toggle>
		_delay_250m();
 39a:	0e 94 83 02 	call	0x506	; 0x506 <_delay_250m>
	/* Step2: Blinking for Number of seconds */
	/* Step1: Turn Off LED1 and LED2 */
	
	DIO_write(Port1, Pin1, high); //Step1
	DIO_write(Port2, Pin2, high);
	for(char i=0 ; i<Value*4 ; i++){
 39e:	e3 94       	inc	r14
 3a0:	2e 2d       	mov	r18, r14
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	80 2f       	mov	r24, r16
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	88 0f       	add	r24, r24
 3aa:	99 1f       	adc	r25, r25
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	28 17       	cp	r18, r24
 3b2:	39 07       	cpc	r19, r25
 3b4:	54 f3       	brlt	.-44     	; 0x38a <LED_double_blink_time+0x50>
		DIO_toggle(Port1, Pin1); //Step2
		DIO_toggle(Port2, Pin2);
		_delay_250m();
	}
	DIO_write(Port1, Pin1, low); //Step3
 3b6:	40 e0       	ldi	r20, 0x00	; 0
 3b8:	6d 2f       	mov	r22, r29
 3ba:	8c 2f       	mov	r24, r28
 3bc:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_write>
	DIO_write(Port2, Pin2, low);
 3c0:	40 e0       	ldi	r20, 0x00	; 0
 3c2:	6f 2d       	mov	r22, r15
 3c4:	81 2f       	mov	r24, r17
 3c6:	0e 94 2d 02 	call	0x45a	; 0x45a <DIO_write>
	return LED_OK;
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	07 c0       	rjmp	.+14     	; 0x3dc <LED_double_blink_time+0xa2>
	return LED_OK;
}

errorState_LED LED_double_blink_time(uint8t Port1, uint8t Pin1, uint8t Port2, uint8t Pin2, uint8t Value){
	if( !(Port1 == A || Port1 == B || Port1 == C || Port1 == D) ){
		return LED_Wrong_Port;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	05 c0       	rjmp	.+10     	; 0x3dc <LED_double_blink_time+0xa2>
	}
	if( !(Pin1>=0 && Pin1<8) ){
		return LED_Wrong_Pin;
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	03 c0       	rjmp	.+6      	; 0x3dc <LED_double_blink_time+0xa2>
	}
	if( !(Port2 == A || Port2 == B || Port2 == C || Port2 == D) ){
		return LED_Wrong_Port;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	01 c0       	rjmp	.+2      	; 0x3dc <LED_double_blink_time+0xa2>
	}
	if( !(Pin2>=0 && Pin2<8) ){
		return LED_Wrong_Pin;
 3da:	82 e0       	ldi	r24, 0x02	; 2
		_delay_250m();
	}
	DIO_write(Port1, Pin1, low); //Step3
	DIO_write(Port2, Pin2, low);
	return LED_OK;
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	0f 91       	pop	r16
 3e4:	ff 90       	pop	r15
 3e6:	ef 90       	pop	r14
 3e8:	08 95       	ret

000003ea <main>:
#define F_CPU 1000000UL
#include "Application/app.h"

int main(void)
{    
	APP_start();
 3ea:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_start>
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	08 95       	ret

000003f4 <DIO_init>:
		return Dio_Wrong_Pin;
	}
	
	*Value = ( *(volatile uint8t*)(Port) & (1 << Pin) ) >> Pin; // read from PINX
	return Dio_OK;
}
 3f4:	89 33       	cpi	r24, 0x39	; 57
 3f6:	31 f0       	breq	.+12     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3f8:	86 33       	cpi	r24, 0x36	; 54
 3fa:	21 f0       	breq	.+8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3fc:	83 33       	cpi	r24, 0x33	; 51
 3fe:	11 f0       	breq	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	80 33       	cpi	r24, 0x30	; 48
 402:	29 f5       	brne	.+74     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 404:	68 30       	cpi	r22, 0x08	; 8
 406:	28 f5       	brcc	.+74     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 408:	9f ef       	ldi	r25, 0xFF	; 255
 40a:	94 0f       	add	r25, r20
 40c:	9e 3f       	cpi	r25, 0xFE	; 254
 40e:	18 f1       	brcs	.+70     	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 410:	4f 3f       	cpi	r20, 0xFF	; 255
 412:	71 f4       	brne	.+28     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 414:	e8 2f       	mov	r30, r24
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	21 81       	ldd	r18, Z+1	; 0x01
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	6a 95       	dec	r22
 426:	e2 f7       	brpl	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 428:	82 2b       	or	r24, r18
 42a:	81 83       	std	Z+1, r24	; 0x01
 42c:	80 e0       	ldi	r24, 0x00	; 0
 42e:	08 95       	ret
 430:	e8 2f       	mov	r30, r24
 432:	f0 e0       	ldi	r31, 0x00	; 0
 434:	21 81       	ldd	r18, Z+1	; 0x01
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	6a 95       	dec	r22
 442:	e2 f7       	brpl	.-8      	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
 444:	80 95       	com	r24
 446:	82 23       	and	r24, r18
 448:	81 83       	std	Z+1, r24	; 0x01
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	08 95       	ret
 44e:	81 e0       	ldi	r24, 0x01	; 1
 450:	08 95       	ret
 452:	82 e0       	ldi	r24, 0x02	; 2
 454:	08 95       	ret
 456:	83 e0       	ldi	r24, 0x03	; 3
 458:	08 95       	ret

0000045a <DIO_write>:
 45a:	89 33       	cpi	r24, 0x39	; 57
 45c:	31 f0       	breq	.+12     	; 0x46a <DIO_write+0x10>
 45e:	86 33       	cpi	r24, 0x36	; 54
 460:	21 f0       	breq	.+8      	; 0x46a <DIO_write+0x10>
 462:	83 33       	cpi	r24, 0x33	; 51
 464:	11 f0       	breq	.+4      	; 0x46a <DIO_write+0x10>
 466:	80 33       	cpi	r24, 0x30	; 48
 468:	19 f5       	brne	.+70     	; 0x4b0 <DIO_write+0x56>
 46a:	68 30       	cpi	r22, 0x08	; 8
 46c:	18 f5       	brcc	.+70     	; 0x4b4 <DIO_write+0x5a>
 46e:	42 30       	cpi	r20, 0x02	; 2
 470:	18 f5       	brcc	.+70     	; 0x4b8 <DIO_write+0x5e>
 472:	41 30       	cpi	r20, 0x01	; 1
 474:	71 f4       	brne	.+28     	; 0x492 <DIO_write+0x38>
 476:	e8 2f       	mov	r30, r24
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	22 81       	ldd	r18, Z+2	; 0x02
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	02 c0       	rjmp	.+4      	; 0x486 <DIO_write+0x2c>
 482:	88 0f       	add	r24, r24
 484:	99 1f       	adc	r25, r25
 486:	6a 95       	dec	r22
 488:	e2 f7       	brpl	.-8      	; 0x482 <DIO_write+0x28>
 48a:	82 2b       	or	r24, r18
 48c:	82 83       	std	Z+2, r24	; 0x02
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	08 95       	ret
 492:	e8 2f       	mov	r30, r24
 494:	f0 e0       	ldi	r31, 0x00	; 0
 496:	22 81       	ldd	r18, Z+2	; 0x02
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <DIO_write+0x48>
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	6a 95       	dec	r22
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <DIO_write+0x44>
 4a6:	80 95       	com	r24
 4a8:	82 23       	and	r24, r18
 4aa:	82 83       	std	Z+2, r24	; 0x02
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	08 95       	ret
 4b0:	81 e0       	ldi	r24, 0x01	; 1
 4b2:	08 95       	ret
 4b4:	82 e0       	ldi	r24, 0x02	; 2
 4b6:	08 95       	ret
 4b8:	84 e0       	ldi	r24, 0x04	; 4
 4ba:	08 95       	ret

000004bc <DIO_toggle>:

errorState_Dio DIO_toggle(uint8t Port, uint8t Pin) {
	if( !(Port == A || Port == B || Port == C || Port == D) ){
 4bc:	89 33       	cpi	r24, 0x39	; 57
 4be:	31 f0       	breq	.+12     	; 0x4cc <DIO_toggle+0x10>
 4c0:	86 33       	cpi	r24, 0x36	; 54
 4c2:	21 f0       	breq	.+8      	; 0x4cc <DIO_toggle+0x10>
 4c4:	83 33       	cpi	r24, 0x33	; 51
 4c6:	11 f0       	breq	.+4      	; 0x4cc <DIO_toggle+0x10>
 4c8:	80 33       	cpi	r24, 0x30	; 48
 4ca:	81 f4       	brne	.+32     	; 0x4ec <DIO_toggle+0x30>
		return Dio_Wrong_Port;
	}
	if( !(Pin>=0 && Pin<8) ){
 4cc:	68 30       	cpi	r22, 0x08	; 8
 4ce:	80 f4       	brcc	.+32     	; 0x4f0 <DIO_toggle+0x34>
		return Dio_Wrong_Pin;
	}
	
	*(volatile uint8t*)(Port + 2) ^= (1 << Pin); // flip --> PORTX 
 4d0:	e8 2f       	mov	r30, r24
 4d2:	f0 e0       	ldi	r31, 0x00	; 0
 4d4:	22 81       	ldd	r18, Z+2	; 0x02
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_toggle+0x24>
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	6a 95       	dec	r22
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_toggle+0x20>
 4e4:	82 27       	eor	r24, r18
 4e6:	82 83       	std	Z+2, r24	; 0x02
	return Dio_OK;
 4e8:	80 e0       	ldi	r24, 0x00	; 0
 4ea:	08 95       	ret
	return Dio_OK;
}

errorState_Dio DIO_toggle(uint8t Port, uint8t Pin) {
	if( !(Port == A || Port == B || Port == C || Port == D) ){
		return Dio_Wrong_Port;
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	08 95       	ret
	}
	if( !(Pin>=0 && Pin<8) ){
		return Dio_Wrong_Pin;
 4f0:	82 e0       	ldi	r24, 0x02	; 2
	}
	
	*(volatile uint8t*)(Port + 2) ^= (1 << Pin); // flip --> PORTX 
	return Dio_OK;
 4f2:	08 95       	ret

000004f4 <Interrupt_init>:
errorState_Interrupt Interrupt_init(void) {
	//Step1: Enable External Interrupt 0 - INT0
	//Step2: Choose External Interrupt sense (on rising edge of INT0) - when press is complete
	//Step3: Enable Global Interrupt - Set 7th bit in status register

	GICR |= (1 << INT0); //Step1
 4f4:	8b b7       	in	r24, 0x3b	; 59
 4f6:	80 64       	ori	r24, 0x40	; 64
 4f8:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1 << ISC00) | (1 << ISC01); //Step2
 4fa:	85 b7       	in	r24, 0x35	; 53
 4fc:	83 60       	ori	r24, 0x03	; 3
 4fe:	85 bf       	out	0x35, r24	; 53
	sei(); //Step3
 500:	78 94       	sei
	
	return Interrupt_OK;
 502:	80 e0       	ldi	r24, 0x00	; 0
 504:	08 95       	ret

00000506 <_delay_250m>:
	/*  Step3: Setting the prescaler to 1024, Timer will star counting here */
	/*  Step4: Check overflow flag */
	/*  Step5: Stop counting by selecting No clock source */
	/*  Step6: Clear overflow flag */

	TCCR0 = 0x00; //Step1
 506:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x0C; //Step2
 508:	8c e0       	ldi	r24, 0x0C	; 12
 50a:	82 bf       	out	0x32, r24	; 50
	TCCR0 |= (1<<0) | (1<<2); //Step3
 50c:	83 b7       	in	r24, 0x33	; 51
 50e:	85 60       	ori	r24, 0x05	; 5
 510:	83 bf       	out	0x33, r24	; 51
	while( (TIFR & (1<<TOV0)) == 0 ) ; //Step4
 512:	08 b6       	in	r0, 0x38	; 56
 514:	00 fe       	sbrs	r0, 0
 516:	fd cf       	rjmp	.-6      	; 0x512 <_delay_250m+0xc>
	TCCR0 = 0x00; //Step5
 518:	13 be       	out	0x33, r1	; 51
	TIFR |= (1<<TOV0); //Step6
 51a:	88 b7       	in	r24, 0x38	; 56
 51c:	81 60       	ori	r24, 0x01	; 1
 51e:	88 bf       	out	0x38, r24	; 56
	
	return Timer_OK;
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	08 95       	ret

00000524 <_exit>:
 524:	f8 94       	cli

00000526 <__stop_program>:
 526:	ff cf       	rjmp	.-2      	; 0x526 <__stop_program>
